'use strict';

const fs = require('fs');
const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const { WebpackManifestPlugin } = require('webpack-manifest-plugin');
const ModuleNotFoundPlugin = require('react-dev-utils/ModuleNotFoundPlugin');
const getClientEnvironment = require('./env');
const paths = require('./paths');

const isEnvDevelopment = process.env.NODE_ENV === 'development';
const isEnvProduction = process.env.NODE_ENV === 'production';
const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';
const shouldUseReactRefresh = process.env.FAST_REFRESH !== 'false';

const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));

// Webpack configuration starts here
module.exports = function (webpackEnv) {
  return {
    mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',
    entry: paths.appIndexJs, // Entry point of the app
    output: {
      path: paths.appBuild,
      filename: isEnvProduction
        ? 'static/js/[name].[contenthash:8].js'
        : isEnvDevelopment && 'static/js/bundle.js',
      chunkFilename: isEnvProduction
        ? 'static/js/[name].[contenthash:8].chunk.js'
        : isEnvDevelopment && 'static/js/[name].chunk.js',
      publicPath: paths.publicUrlOrPath,
    },
    devtool: isEnvProduction
      ? shouldUseSourceMap
        ? 'source-map'
        : false
      : isEnvDevelopment && 'cheap-module-source-map',
    module: {
      rules: [
        // JS and JSX rule for Babel
        {
          test: /\.(js|mjs|jsx|ts|tsx)$/,
          include: [
            paths.appSrc,
            path.resolve(__dirname, 'node_modules/react-square-web-payments-sdk'), // Ensure SDK is transpiled
          ],
          loader: require.resolve('babel-loader'),
          options: {
            presets: [
              // Transpile React code with the appropriate preset
              require.resolve('babel-preset-react-app'),
            ],
            plugins: [
              isEnvDevelopment && shouldUseReactRefresh && require.resolve('react-refresh/babel'), // HMR plugin for development
            ].filter(Boolean),
            cacheDirectory: true,
            cacheCompression: false,
            compact: isEnvProduction,
          },
        },
        // CSS rule
        {
          test: /\.css$/,
          use: [
            isEnvDevelopment && require.resolve('style-loader'),
            isEnvProduction && {
              loader: MiniCssExtractPlugin.loader,
              options: { publicPath: '../../' },
            },
            {
              loader: require.resolve('css-loader'),
              options: {
                sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,
              },
            },
          ].filter(Boolean),
        },
        // Image assets
        {
          test: /\.(bmp|gif|jpe?g|png|svg)$/,
          type: 'asset',
          parser: {
            dataUrlCondition: {
              maxSize: 10000, // Inline files smaller than 10 KB
            },
          },
        },
        // Other asset/resource types
        {
          exclude: /\.(js|mjs|jsx|ts|tsx|html|json)$/,
          type: 'asset/resource',
        },
      ],
    },
    plugins: [
      new HtmlWebpackPlugin({
        inject: true,
        template: paths.appHtml,
      }),
      isEnvDevelopment && shouldUseReactRefresh && new ReactRefreshWebpackPlugin({
        overlay: false, // Disable overlay to prevent multiple reinitializations
      }),
      isEnvProduction && new MiniCssExtractPlugin({
        filename: 'static/css/[name].[contenthash:8].css',
        chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',
      }),
      new webpack.DefinePlugin(env.stringified), // Inject environment variables
      new ModuleNotFoundPlugin(paths.appPath),
      isEnvProduction && new WebpackManifestPlugin({
        fileName: 'asset-manifest.json',
        publicPath: paths.publicUrlOrPath,
        generate: (seed, files, entrypoints) => {
          const manifestFiles = files.reduce((manifest, file) => {
            manifest[file.name] = file.path;
            return manifest;
          }, seed);
          const entrypointFiles = entrypoints.main.filter(
            fileName => !fileName.endsWith('.map')
          );
          return { files: manifestFiles, entrypoints: entrypointFiles };
        },
      }),
      isEnvProduction && new TerserPlugin({
        terserOptions: {
          parse: { ecma: 8 },
          compress: { ecma: 5, warnings: false, comparisons: false, inline: 2 },
          mangle: { safari10: true },
          output: { ecma: 5, comments: false, ascii_only: true },
        },
      }),
      isEnvProduction && new CssMinimizerPlugin(), // Minify CSS in production
    ].filter(Boolean),
    resolve: {
      modules: ['node_modules', paths.appNodeModules],
      extensions: ['.js', '.jsx', '.json'],
      alias: {
        'react-native': 'react-native-web', // Web alias for React Native
      },
    },
    cache: {
      type: 'filesystem',
      cacheDirectory: paths.appWebpackCache,
    },
    performance: false, // Disable performance hints
  };
};
